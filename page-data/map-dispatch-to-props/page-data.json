{"componentChunkName":"component---src-templates-lesson-template-js","path":"/map-dispatch-to-props","result":{"data":{"markdownRemark":{"html":"<p>Okay, so we have our replacement for <code class=\"language-text\">useSelector</code>, how do we pass <code class=\"language-text\">dispatch</code> in?</p>\n<p>In order to update the state—and subsequently the UI, we're going to need to do a few things.</p>\n<ul>\n<li>We need an action to dispatch.</li>\n<li>We need the reducer to deal with that action.</li>\n<li>We need the <code class=\"language-text\">NewItemForm</code> to dispatch that action.</li>\n</ul>\n<p>We'll use the aciton creator pattern to format our action for us in <code class=\"language-text\">action.js</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">ITEM_ADDED</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ITEM_ADDED\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">addNewItem</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> <span class=\"token constant\">ITEM_ADDED</span><span class=\"token punctuation\">,</span>\n    payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token punctuation\">,</span>\n      price<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You'll notice what I don't have in here: anything the that we didn't didn't get from the action itself. So, like, we don't know the <code class=\"language-text\">uuid</code> yet. The quantity will be 1 by default. The only things that the user gave us in that form was the <code class=\"language-text\">name</code> and the <code class=\"language-text\">price</code> and our action reflects that.</p>\n<p>Next, we'll update the reducer.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialItems<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">ITEM_ADDED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> uuid<span class=\"token operator\">:</span> id<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> quantity<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span> item<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, one thing you'll notice is that I will let the action payload override the default properties. Maybe in the future, we add a quantity field. This will take the quantity from the action and use that if one exists.</p>\n<p>Let's try out firing an action from the developer tools.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'ITEM_ADDED'</span><span class=\"token punctuation\">,</span>\n  payload<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Braised Seitan'</span><span class=\"token punctuation\">,</span> price<span class=\"token operator\">:</span> <span class=\"token number\">12</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cool, we're most of the way there. Now we just need to wire that up with the <code class=\"language-text\">NewItemForm</code> and we're good to go.</p>\n<p>We can't just require the action creator in the component because it's just a function that returns an object and it doesn't know anything about <code class=\"language-text\">dispatch</code>.</p>\n<p>What we want to do is pass in an <code class=\"language-text\">onSubmit</code> prop, which the component is already expecting that is bound to Redux's <code class=\"language-text\">dispatch</code>.</p>\n<p>Let's start with the simplest possible version in <code class=\"language-text\">containers/NewItemFormContainer.js</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewItemForm <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/NewItemForm\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> ConnectedNewItemForm <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NewItemForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Connect components received <code class=\"language-text\">dispatch</code> out of the box. So, now we <em>can</em> do something like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">NewItemForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSubmit<span class=\"token punctuation\">,</span> dispatch <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// …</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">handleSubmit</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> onSubmit <span class=\"token operator\">===</span> <span class=\"token string\">\"function\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">onSubmit</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token punctuation\">,</span> price <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addNewItem</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setPrice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// …</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>(We'll also want to swap out <code class=\"language-text\">NewItemForm</code> for <code class=\"language-text\">NewItemFormContainer</code> in <code class=\"language-text\">Calculator.js</code>.)</p>\n<p>This approach is a bit flawed. It ties our presentational component to Redux, which is less than optimal. It doesn't create a clear API contract. <code class=\"language-text\">NewItemForm</code> can literally dispatch anything it wants. We can do better.</p>\n<p>Just like we can format our state to the props of a presentation component. We can do that with <code class=\"language-text\">dispatch</code> as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> connect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-redux\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> NewItemForm <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../components/NewItemForm\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> addNewItem <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../store/items/reducer\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onSubmit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> price</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">addNewItem</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> NewItemFormContainer <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>NewItemForm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We can rip out that fun stuff we did with <code class=\"language-text\">dispatch</code> and put the component back to the way we found it.</p>\n<p>Let's say we had a whole bunch of actions. We probably don't need to call each one with <code class=\"language-text\">dispatch</code> by hand. We can use <code class=\"language-text\">bindActionCreators</code> in order to take an object of action creators and spit out an object with all of those aciton creators bound to <code class=\"language-text\">dispatch</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">bindActionCreators</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      onSubmit<span class=\"token operator\">:</span> addNewItem<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    dispatch\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>For simple things, we can also use a simpler syntax.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mapDispatchToProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  onSubmit<span class=\"token operator\">:</span> addNewItem<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If <code class=\"language-text\">connect</code> receives an object, it will automatically pass it to <code class=\"language-text\">bindActionCreators</code> and pass it through to the component.</p>","frontmatter":{"path":"/map-dispatch-to-props","title":"mapDispatchToProps","order":"4C","section":"Connecting Redux to React","description":"Getting started and an introduction to TypeScript && React Workshop"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"8A","path":"/create-async-thunk","title":"Creating Async Thunks in Redux Toolkit"}}},{"node":{"frontmatter":{"order":"2E","path":"/bind-action-creators","title":"Bind Action Creators"}}},{"node":{"frontmatter":{"order":"2F","path":"/combine-reducers","title":"Combine Reducers"}}},{"node":{"frontmatter":{"order":"2G","path":"/middleware-and-enhancers","title":"Middleware and Enhancers"}}},{"node":{"frontmatter":{"order":"2B","path":"/create-store","title":"Redux Stores and Reducers"}}},{"node":{"frontmatter":{"order":"2C","path":"/stores-and-dispatch","title":"Redux Stores and Dispatch"}}},{"node":{"frontmatter":{"order":"2A","path":"/welcome","title":"Redux's API"}}},{"node":{"frontmatter":{"order":"2D","path":"/subscribing-to-the-store","title":"Subscring to Store Changes"}}},{"node":{"frontmatter":{"order":"4G","path":"/deriving-data","title":"Deriving Data"}}},{"node":{"frontmatter":{"order":"4A","path":"/connect","title":"Using the Connect API"}}},{"node":{"frontmatter":{"order":"4C","path":"/map-dispatch-to-props","title":"mapDispatchToProps"}}},{"node":{"frontmatter":{"order":"4B","path":"/map-state-to-props","title":"mapStateToProps"}}},{"node":{"frontmatter":{"order":"4E","path":"/removing-an-item","title":"Removing an Item"}}},{"node":{"frontmatter":{"order":"4D","path":"/connect-taskmaster","title":"Adding Connect to Taskmaster (Exercise)"}}},{"node":{"frontmatter":{"order":"4F","path":"/updating-price-and-quantity","title":"Updating Price and Quantity"}}},{"node":{"frontmatter":{"order":"3I","path":"/abstracting-hooks","title":"Abstracting Logic Into a Custom Hook"}}},{"node":{"frontmatter":{"order":"3C","path":"/redux-dev-tools","title":"Adding the Redux Dev Tools"}}},{"node":{"frontmatter":{"order":"3F","path":"/exercise-react-redux-hooks","title":"Exercise: Adding SetCounter"}}},{"node":{"frontmatter":{"order":"3E","path":"/hooking-up-dispatch","title":"Hooking Up Dispatch"}}},{"node":{"frontmatter":{"order":"3D","path":"/hooking-up-state","title":"Hooking Up State"}}},{"node":{"frontmatter":{"order":"3B","path":"/introduction-to-react-redux","title":"Introductiton to React Redux"}}},{"node":{"frontmatter":{"order":"3G","path":"/solution-react-redux-hooks","title":"Solution: Adding SetCounter"}}},{"node":{"frontmatter":{"order":"3H","path":"/use-actions","title":"Binding Actions"}}},{"node":{"frontmatter":{"order":"3A","path":"/basic-redux-functionality","title":"Implementing the Basic Logic"}}},{"node":{"frontmatter":{"order":"6B","path":"/immer","title":"Using Immer with an Entire Reducer"}}},{"node":{"frontmatter":{"order":"6A","path":"/immer","title":"Mutable Immutable State with Immer"}}},{"node":{"frontmatter":{"order":"1A","path":"/welcome","title":"Welcome and Introduction"}}},{"node":{"frontmatter":{"order":"5A","path":"/reselect","title":"Computing Data with Reselect"}}},{"node":{"frontmatter":{"order":"5B","path":"/reselect-exercise","title":"Using Props with Reselect"}}},{"node":{"frontmatter":{"order":"7E","path":"/slice-actions","title":"Slice Actions"}}},{"node":{"frontmatter":{"order":"7F","path":"/create-action","title":"Creating Actions"}}},{"node":{"frontmatter":{"order":"7B","path":"/creating-a-slice","title":"Creating a Slice of State"}}},{"node":{"frontmatter":{"order":"7G","path":"/extra-reducers","title":"Extra Reducers"}}},{"node":{"frontmatter":{"order":"7A","path":"/redux-toolkit","title":"Introduction to Redux Toolkit"}}},{"node":{"frontmatter":{"order":"7C","path":"/creating-a-slice-exercise","title":"Human Slice (Exercise)"}}},{"node":{"frontmatter":{"order":"7D","path":"/creating-a-slice-solution","title":"Human Slice (Solution)"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}