{"componentChunkName":"component---src-templates-lesson-template-js","path":"/immer","result":{"data":{"markdownRemark":{"html":"<p>Immer is a library that allows us to act like mutating state is totally okayâ€”mostly because we're not actually mutating it.</p>\n<p>Here is a super simple example.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">ITEM_ADDED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">draftState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      uuid<span class=\"token operator\">:</span> id<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>\n      quantity<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>\n      price<span class=\"token operator\">:</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    draftState<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you look closely, you can see the following:</p>\n<ul>\n<li>It takes the object you want to change and then a function where it passes it in as an object you can mutate.</li>\n<li>After you're done, it returns a new object based on the changes you made the the draft object.</li>\n</ul>\n<p>That's not particularly impressive with adding a new item. The spread operator wasn't huring anyone. But, what about, updating the price?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">ITEM_PRICE_UPDATED</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">produce</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">draftState</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> item <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> item<span class=\"token punctuation\">.</span>uuid <span class=\"token operator\">===</span> action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>uuid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    item<span class=\"token punctuation\">.</span>price <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>price<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"exercise\" style=\"position:relative;\"><a href=\"#exercise\" aria-label=\"exercise permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Exercise</h2>\n<p><a href=\"https://github.com/stevekinney/tip-calculator/commit/a83896158ee15103684139be236b3ab861961525\">This</a> is where we our now.</p>\n<p>Can you implement it for the quantity? (You can fine the solution <a href=\"https://github.com/stevekinney/tip-calculator/commit/9412c41114789c1d66f1cb7193bf23d85b015792\">here</a>.)</p>","frontmatter":{"path":"/immer","title":"Mutable Immutable State with Immer","order":"6A","section":"Immer","description":"Getting started and an introduction to TypeScript && React Workshop"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"8A","path":"/create-async-thunk","title":"Creating Async Thunks in Redux Toolkit"}}},{"node":{"frontmatter":{"order":"8B","path":"/pulling-it-all-together","title":"Pulling It Together in React Toolkit"}}},{"node":{"frontmatter":{"order":"2G","path":"/middleware-and-enhancers","title":"Middleware and Enhancers"}}},{"node":{"frontmatter":{"order":"2E","path":"/bind-action-creators","title":"Bind Action Creators"}}},{"node":{"frontmatter":{"order":"2F","path":"/combine-reducers","title":"Combine Reducers"}}},{"node":{"frontmatter":{"order":"2B","path":"/create-store","title":"Redux Stores and Reducers"}}},{"node":{"frontmatter":{"order":"2C","path":"/stores-and-dispatch","title":"Redux Stores and Dispatch"}}},{"node":{"frontmatter":{"order":"2A","path":"/redux-api","title":"Redux's API"}}},{"node":{"frontmatter":{"order":"2D","path":"/subscribing-to-the-store","title":"Subscring to Store Changes"}}},{"node":{"frontmatter":{"order":"4G","path":"/deriving-data","title":"Deriving Data"}}},{"node":{"frontmatter":{"order":"4A","path":"/connect","title":"Using the Connect API"}}},{"node":{"frontmatter":{"order":"4C","path":"/map-dispatch-to-props","title":"mapDispatchToProps"}}},{"node":{"frontmatter":{"order":"4B","path":"/map-state-to-props","title":"mapStateToProps"}}},{"node":{"frontmatter":{"order":"4E","path":"/removing-an-item","title":"Removing an Item"}}},{"node":{"frontmatter":{"order":"4D","path":"/connect-taskmaster","title":"Adding Connect to Taskmaster (Exercise)"}}},{"node":{"frontmatter":{"order":"4F","path":"/updating-price-and-quantity","title":"Updating Price and Quantity"}}},{"node":{"frontmatter":{"order":"3I","path":"/abstracting-hooks","title":"Abstracting Logic Into a Custom Hook"}}},{"node":{"frontmatter":{"order":"3C","path":"/redux-dev-tools","title":"Adding the Redux Dev Tools"}}},{"node":{"frontmatter":{"order":"3F","path":"/exercise-react-redux-hooks","title":"Exercise: Adding SetCounter"}}},{"node":{"frontmatter":{"order":"3E","path":"/hooking-up-dispatch","title":"Hooking Up Dispatch"}}},{"node":{"frontmatter":{"order":"3D","path":"/hooking-up-state","title":"Hooking Up State"}}},{"node":{"frontmatter":{"order":"3B","path":"/introduction-to-react-redux","title":"Introductiton to React Redux"}}},{"node":{"frontmatter":{"order":"3G","path":"/solution-react-redux-hooks","title":"Solution: Adding SetCounter"}}},{"node":{"frontmatter":{"order":"3H","path":"/use-actions","title":"Binding Actions"}}},{"node":{"frontmatter":{"order":"3A","path":"/basic-redux-functionality","title":"Implementing the Basic Logic"}}},{"node":{"frontmatter":{"order":"6B","path":"/immer-entire-reducer","title":"Using Immer with an Entire Reducer"}}},{"node":{"frontmatter":{"order":"6A","path":"/immer","title":"Mutable Immutable State with Immer"}}},{"node":{"frontmatter":{"order":"1B","path":"/repositories","title":"Repositories Used In This Course"}}},{"node":{"frontmatter":{"order":"5A","path":"/reselect","title":"Computing Data with Reselect"}}},{"node":{"frontmatter":{"order":"1A","path":"/welcome","title":"Welcome and Introduction"}}},{"node":{"frontmatter":{"order":"5B","path":"/reselect-exercise","title":"Using Props with Reselect"}}},{"node":{"frontmatter":{"order":"7E","path":"/slice-actions","title":"Slice Actions"}}},{"node":{"frontmatter":{"order":"7F","path":"/create-action","title":"Creating Actions"}}},{"node":{"frontmatter":{"order":"7B","path":"/creating-a-slice","title":"Creating a Slice of State"}}},{"node":{"frontmatter":{"order":"7G","path":"/extra-reducers","title":"Extra Reducers"}}},{"node":{"frontmatter":{"order":"7A","path":"/redux-toolkit","title":"Introduction to Redux Toolkit"}}},{"node":{"frontmatter":{"order":"7C","path":"/creating-a-slice-exercise","title":"Human Slice (Exercise)"}}},{"node":{"frontmatter":{"order":"7D","path":"/creating-a-slice-solution","title":"Human Slice (Solution)"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}