{"componentChunkName":"component---src-templates-lesson-template-js","path":"/create-store","result":{"data":{"markdownRemark":{"html":"<p>For those of you keeping track at home, we're now really talking about four functions. That's right, we've already covered about 80% of the API and we're just getting started.</p>\n<p>Covering <code class=\"language-text\">compose()</code> first was kind of cheating. It's not really super important to understanding Redux. But, we'll take our small wins when we can get them, right?</p>\n<p>Redux is a friendly state management library. In this industry, we tend to call the place where we keep our state the \"store.\" Redux's <code class=\"language-text\">createStore()</code> method will … create … a … store.</p>\n<p>One does not just create a Redux store, however.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This will blow up, but at least we get a helpful error message.</p>\n<blockquote>\n<p>Error: Expected the reducer to be a function.</p>\n</blockquote>\n<p>So, there are two things to take away from this: we need to provide an argument that is a reducer and a reducer is a function. What is a reducer?</p>\n<p>Let's stop for a minute and talk about Redux at a high level. We have the state of our application. We have things that happen (e.g. user actions, WebSocket messages, etc.). When a thing happens, what effect does that have on the state of our application?</p>\n<p>Well, friends, a reducer is a function where the first argument is the current state of the world and the second is something that happened. Somewhere inside of the function, we figure out what the new state of the world ought to be based on whatever happened.</p>\n<p>That's the job of the reducer. It looks at the new thing that happened and it looks at the current state of the world and returns a new state of the world.</p>\n<p>Here's the crazy thing: it's just a function. It takes two arguments: the thing that just happened and the current (soon to be previous) state of the world. It returns one thing: the new state of the world.</p>\n<p>To get things started, we're going to make a simple calculator. The state of the world will be an object that stores the current result, which will default to zero.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">type</span> <span class=\"token class-name\">ApplicationState</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Action</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">[</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> ApplicationState<span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> Action<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> ApplicationState<span class=\"token punctuation\">;</span></code></pre></div>\n<p>So, let's start with a super simple example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>An action is just an object. The only requirement is that is has a <code class=\"language-text\">type</code> property. Sure, something happened, but what type of thing happened?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> incrementAction <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"INCREMENT\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"a-word-on-conventions-around-action-types\" style=\"position:relative;\"><a href=\"#a-word-on-conventions-around-action-types\" aria-label=\"a word on conventions around action types permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>A Word on Conventions Around Action Types</h2>\n<p>There are a few different patterns for naming your action types. For a long time, it was convention to use <code class=\"language-text\">SCREAMING_SNAKE_CASE</code>. As we'll see in a little bit, we frequently alias our action type names to constants in JavaScript, we we can't have spaces. Using <code class=\"language-text\">SCREAMING_SNAKE_CASE</code> also helps separates our constant action type names from other variables in our application.</p>\n<p><strong>Nota bene</strong>: We'll see later on that Redux Toolkit uses a slightly different convetion. You'll see something more like this: `\"tasks/addTask\" or \"counter/increment\".</p>\n<ul>\n<li>We're going to start by using the <code class=\"language-text\">SCREAMING_SNAKE_CASE</code> early in this course.</li>\n<li>We'll eventually transition to the \"counter/increment\" style when we use Redux Toolkit. There are some abstractions that make this work that a little to much for us at this very moment.</li>\n</ul>\n<h2 id=\"updating-state-based-on-actions\" style=\"position:relative;\"><a href=\"#updating-state-based-on-actions\" aria-label=\"updating state based on actions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Updating State Based on Actions</h2>\n<p>Let's say an increment action comes in. Well, we should probably increment the value, right?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">\"INCREMENT\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Alright, there are a few things here. You'll notice that we're creating a new object rather than mutating the existing one. This is helpful because it allows anything depending on this state to figure out that we have a new state of the world. We also want to make sure we return the existing state in the event that an action we don't care about comes through the reducer.</p>\n<p>We can make this a little bit better too:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"INCREMENT\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> incrementCounter <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">INCREMENT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>You'll notice we made a constant called <code class=\"language-text\">INCREMENT</code>. This is what I was talking about before. The main reason that we took this approach is because we needed to make sure that we didn't accidentally mispell the action type—either when we created the action or in the reducer. At least now, our code will blow up. This sure beats silently failing.</p>\n<p>We'll also typically use functions to create our actions since they might need more information.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> initialState <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"INCREMENT\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">ADD</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"ADD\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">increment</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">INCREMENT</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">add</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token constant\">ADD</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> number <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">reducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state <span class=\"token operator\">=</span> initialState<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">INCREMENT</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token constant\">ADD</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>value <span class=\"token operator\">+</span> action<span class=\"token punctuation\">.</span>payload <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Calling it a <code class=\"language-text\">payload</code> is also just a convention. You'll probably notice that nothing in the last few code samples have literally nothing to do with Redux. It's all just JavaScript.</p>\n<p>We follow the conventions because we want our colleagues to like us.</p>\n<p>But, we have a reducer now, so that's nice.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> redux<span class=\"token punctuation\">.</span><span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We now have an initial state of the world and some logic about how it should change in the event that a limited set of things happen.</p>","frontmatter":{"path":"/create-store","title":"Redux Stores and Reducers","order":"2B","section":"Redux Without React","description":"Creating Stores and Reducers"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"8A","path":"/create-async-thunk","title":"Creating Async Thunks in Redux Toolkit"}}},{"node":{"frontmatter":{"order":"2G","path":"/middleware-and-enhancers","title":"Middleware and Enhancers"}}},{"node":{"frontmatter":{"order":"2E","path":"/bind-action-creators","title":"Bind Action Creators"}}},{"node":{"frontmatter":{"order":"2F","path":"/combine-reducers","title":"Combine Reducers"}}},{"node":{"frontmatter":{"order":"2B","path":"/create-store","title":"Redux Stores and Reducers"}}},{"node":{"frontmatter":{"order":"2C","path":"/stores-and-dispatch","title":"Redux Stores and Dispatch"}}},{"node":{"frontmatter":{"order":"2A","path":"/welcome","title":"Redux's API"}}},{"node":{"frontmatter":{"order":"2D","path":"/subscribing-to-the-store","title":"Subscring to Store Changes"}}},{"node":{"frontmatter":{"order":"4G","path":"/deriving-data","title":"Deriving Data"}}},{"node":{"frontmatter":{"order":"4A","path":"/connect","title":"Using the Connect API"}}},{"node":{"frontmatter":{"order":"4C","path":"/map-dispatch-to-props","title":"mapDispatchToProps"}}},{"node":{"frontmatter":{"order":"4B","path":"/map-state-to-props","title":"mapStateToProps"}}},{"node":{"frontmatter":{"order":"4E","path":"/removing-an-item","title":"Removing an Item"}}},{"node":{"frontmatter":{"order":"4D","path":"/connect-taskmaster","title":"Adding Connect to Taskmaster (Exercise)"}}},{"node":{"frontmatter":{"order":"4F","path":"/updating-price-and-quantity","title":"Updating Price and Quantity"}}},{"node":{"frontmatter":{"order":"3I","path":"/abstracting-hooks","title":"Abstracting Logic Into a Custom Hook"}}},{"node":{"frontmatter":{"order":"3C","path":"/redux-dev-tools","title":"Adding the Redux Dev Tools"}}},{"node":{"frontmatter":{"order":"3F","path":"/exercise-react-redux-hooks","title":"Exercise: Adding SetCounter"}}},{"node":{"frontmatter":{"order":"3E","path":"/hooking-up-dispatch","title":"Hooking Up Dispatch"}}},{"node":{"frontmatter":{"order":"3D","path":"/hooking-up-state","title":"Hooking Up State"}}},{"node":{"frontmatter":{"order":"3B","path":"/introduction-to-react-redux","title":"Introductiton to React Redux"}}},{"node":{"frontmatter":{"order":"3G","path":"/solution-react-redux-hooks","title":"Solution: Adding SetCounter"}}},{"node":{"frontmatter":{"order":"3H","path":"/use-actions","title":"Binding Actions"}}},{"node":{"frontmatter":{"order":"3A","path":"/basic-redux-functionality","title":"Implementing the Basic Logic"}}},{"node":{"frontmatter":{"order":"6B","path":"/immer","title":"Using Immer with an Entire Reducer"}}},{"node":{"frontmatter":{"order":"6A","path":"/immer","title":"Mutable Immutable State with Immer"}}},{"node":{"frontmatter":{"order":"1B","path":"/repositories","title":"Repositories Used In This Course"}}},{"node":{"frontmatter":{"order":"1A","path":"/welcome","title":"Welcome and Introduction"}}},{"node":{"frontmatter":{"order":"5A","path":"/reselect","title":"Computing Data with Reselect"}}},{"node":{"frontmatter":{"order":"5B","path":"/reselect-exercise","title":"Using Props with Reselect"}}},{"node":{"frontmatter":{"order":"7E","path":"/slice-actions","title":"Slice Actions"}}},{"node":{"frontmatter":{"order":"7F","path":"/create-action","title":"Creating Actions"}}},{"node":{"frontmatter":{"order":"7B","path":"/creating-a-slice","title":"Creating a Slice of State"}}},{"node":{"frontmatter":{"order":"7G","path":"/extra-reducers","title":"Extra Reducers"}}},{"node":{"frontmatter":{"order":"7A","path":"/redux-toolkit","title":"Introduction to Redux Toolkit"}}},{"node":{"frontmatter":{"order":"7C","path":"/creating-a-slice-exercise","title":"Human Slice (Exercise)"}}},{"node":{"frontmatter":{"order":"7D","path":"/creating-a-slice-solution","title":"Human Slice (Solution)"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}