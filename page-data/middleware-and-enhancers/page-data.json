{"componentChunkName":"component---src-templates-lesson-template-js","path":"/middleware-and-enhancers","result":{"data":{"markdownRemark":{"html":"<p>The good news is that Redux is simple. The bad news is that it's simple. This means that there is a lot that it <em>doesn't</em> do. That's okay, because we can extend what Redux can do with middleware and store enhancers.</p>\n<p>Middleware are a form of store enhancers, so, we'll start there.</p>\n<h2 id=\"the-actual-api-for-createstore\" style=\"position:relative;\"><a href=\"#the-actual-api-for-createstore\" aria-label=\"the actual api for createstore permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>The Actual API for <code class=\"language-text\">createStore()</code></h2>\n<p><code class=\"language-text\">createStore()</code> takes one, two, or three arguments.</p>\n<ul>\n<li><code class=\"language-text\">reducer</code></li>\n<li><code class=\"language-text\">initialState</code> (Optional)</li>\n<li><code class=\"language-text\">enhancer</code> (Optional)</li>\n</ul>\n<p>As we saw, passing in a reducer is <em>required</em>, but everything else is optional. Enhancers and middleware are definitely on the more advanced side, but let's briefly dip our our toes in a bit right now because I both promised you that we'd cover the lion's share of the API surface area of Redux and because we'll see them pop up in this workshop as well.</p>\n<p>An enhancer is a function that allows you to add functionality to Redux that it doesn't come with out of the box. We'll see this when we want to hook it up to the developer tools or when we want add some the ability to do asynchronous tasks (e.g. make a server-side HTTP requests).</p>\n<p>Enhancers are—amazing—both simple, but also kind of hard to explain.</p>\n<p>An enhancer is a function that gets a copy of <code class=\"language-text\">createStore</code> and then a copy of all of the arguments passed to <code class=\"language-text\">createStore</code> before <em>actually</em> passing them to <code class=\"language-text\">createStore</code>. This allows you to create libraries and plugins that will augment how the store works.</p>\n<p>We'll see this when we use the Redux Developer Tools and when we want to dispatch asynchronous actions. It's <em>not</em> super common that you'll write your own enhancers, but you'll use them from time to time.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">monitorReducerEnhancer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">createStore</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token parameter\">reducer<span class=\"token punctuation\">,</span>\n  initialState<span class=\"token punctuation\">,</span>\n  enhancer</span>\n<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">monitoredReducer</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> start <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> newState <span class=\"token operator\">=</span> <span class=\"token function\">reducer</span><span class=\"token punctuation\">(</span>state<span class=\"token punctuation\">,</span> action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> end <span class=\"token operator\">=</span> performance<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> diff <span class=\"token operator\">=</span> <span class=\"token function\">round</span><span class=\"token punctuation\">(</span>end <span class=\"token operator\">-</span> start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Reducer process time:\"</span><span class=\"token punctuation\">,</span> diff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> newState<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>monitoredReducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">,</span> enhancer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, when you create your store, you can do modify whatever reducer is passed in.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> monitorReducerEnhancer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"mini-exercise-write-a-log-enhancer\" style=\"position:relative;\"><a href=\"#mini-exercise-write-a-log-enhancer\" aria-label=\"mini exercise write a log enhancer permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mini-Exercise: Write a Log Enhancer</h2>\n<p>Can you write an enhancer that <code class=\"language-text\">console.logs</code> the action and the state before and after calling the reducer? <a href=\"https://gist.github.com/stevekinney/f0009452e07db459e093086b0a8e03c2\">Solution</a>.</p>\n<h2 id=\"applymiddleware\" style=\"position:relative;\"><a href=\"#applymiddleware\" aria-label=\"applymiddleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><code class=\"language-text\">applyMiddleware</code></h2>\n<p><code class=\"language-text\">applyMiddleware</code> is a way to produce an enhancer out of chain of middleware.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> enhancer <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>\n  firstMiddleware<span class=\"token punctuation\">,</span>\n  secondMiddleware<span class=\"token punctuation\">,</span>\n  thirdMiddleware\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Middleware have the following API:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">someMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">store</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Do stuff before the action reaches the reducer or the next piece of middleware.</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// Do stuff after the action has worked through the reducer.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">next</code> is either the next piece of middleware or it's <code class=\"language-text\">store.dispatch</code>. If you don't call <code class=\"language-text\">next</code>, you will swallow the action and it will never hit the reducer.</p>\n<p>Here is a quick example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">logMiddleware</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">store</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">next</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">action</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Before\"</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> action <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">next</span><span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"After\"</span><span class=\"token punctuation\">,</span> store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> action <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>logMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>This is a pretty powerful idea.</p>\n<p>Our examples are intentionally contrived, but if you wanted to you could use both our enhancer and our middleware. But, if <code class=\"language-text\">createStore</code> only takes one enhancer—then how?</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> middlewares <span class=\"token operator\">=</span> <span class=\"token function\">applyMiddleware</span><span class=\"token punctuation\">(</span>logMiddleware<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> enhancer <span class=\"token operator\">=</span> <span class=\"token function\">compose</span><span class=\"token punctuation\">(</span>middleware<span class=\"token punctuation\">,</span> logEnhancer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It's kind of ridiculous, but it works.</p>\n<p>And with that, we covered all of Redux's API, but you probably want to see how it works with React, right?</p>\n<h2 id=\"mini-exercise-implementing-monitoring-as-middleware\" style=\"position:relative;\"><a href=\"#mini-exercise-implementing-monitoring-as-middleware\" aria-label=\"mini exercise implementing monitoring as middleware permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Mini-Exercise: Implementing Monitoring as Middleware</h2>\n<p>Can you re-implement that monitor enhancer as middleware? (<a href=\"https://gist.github.com/stevekinney/f0009452e07db459e093086b0a8e03c2\">Solution</a>).</p>","frontmatter":{"path":"/middleware-and-enhancers","title":"Middleware and Enhancers","order":"2G","section":"Redux Without React","description":"Creating Stores and Reducers"}},"allMarkdownRemark":{"edges":[{"node":{"frontmatter":{"order":"8A","path":"/create-async-thunk","title":"Creating Async Thunks in Redux Toolkit"}}},{"node":{"frontmatter":{"order":"8B","path":"/pulling-it-all-together","title":"Pulling It Together in React Toolkit"}}},{"node":{"frontmatter":{"order":"2G","path":"/middleware-and-enhancers","title":"Middleware and Enhancers"}}},{"node":{"frontmatter":{"order":"2E","path":"/bind-action-creators","title":"Bind Action Creators"}}},{"node":{"frontmatter":{"order":"2F","path":"/combine-reducers","title":"Combine Reducers"}}},{"node":{"frontmatter":{"order":"2B","path":"/create-store","title":"Redux Stores and Reducers"}}},{"node":{"frontmatter":{"order":"2C","path":"/stores-and-dispatch","title":"Redux Stores and Dispatch"}}},{"node":{"frontmatter":{"order":"2A","path":"/redux-api","title":"Redux's API"}}},{"node":{"frontmatter":{"order":"2D","path":"/subscribing-to-the-store","title":"Subscring to Store Changes"}}},{"node":{"frontmatter":{"order":"4G","path":"/deriving-data","title":"Deriving Data"}}},{"node":{"frontmatter":{"order":"4A","path":"/connect","title":"Using the Connect API"}}},{"node":{"frontmatter":{"order":"4C","path":"/map-dispatch-to-props","title":"mapDispatchToProps"}}},{"node":{"frontmatter":{"order":"4B","path":"/map-state-to-props","title":"mapStateToProps"}}},{"node":{"frontmatter":{"order":"4E","path":"/removing-an-item","title":"Removing an Item"}}},{"node":{"frontmatter":{"order":"4D","path":"/connect-taskmaster","title":"Adding Connect to Taskmaster (Exercise)"}}},{"node":{"frontmatter":{"order":"4F","path":"/updating-price-and-quantity","title":"Updating Price and Quantity"}}},{"node":{"frontmatter":{"order":"3I","path":"/abstracting-hooks","title":"Abstracting Logic Into a Custom Hook"}}},{"node":{"frontmatter":{"order":"3C","path":"/redux-dev-tools","title":"Adding the Redux Dev Tools"}}},{"node":{"frontmatter":{"order":"3F","path":"/exercise-react-redux-hooks","title":"Exercise: Adding SetCounter"}}},{"node":{"frontmatter":{"order":"3E","path":"/hooking-up-dispatch","title":"Hooking Up Dispatch"}}},{"node":{"frontmatter":{"order":"3D","path":"/hooking-up-state","title":"Hooking Up State"}}},{"node":{"frontmatter":{"order":"3B","path":"/introduction-to-react-redux","title":"Introductiton to React Redux"}}},{"node":{"frontmatter":{"order":"3G","path":"/solution-react-redux-hooks","title":"Solution: Adding SetCounter"}}},{"node":{"frontmatter":{"order":"3H","path":"/use-actions","title":"Binding Actions"}}},{"node":{"frontmatter":{"order":"3A","path":"/basic-redux-functionality","title":"Implementing the Basic Logic"}}},{"node":{"frontmatter":{"order":"6B","path":"/immer-entire-reducer","title":"Using Immer with an Entire Reducer"}}},{"node":{"frontmatter":{"order":"6A","path":"/immer","title":"Mutable Immutable State with Immer"}}},{"node":{"frontmatter":{"order":"1B","path":"/repositories","title":"Repositories Used In This Course"}}},{"node":{"frontmatter":{"order":"5A","path":"/reselect","title":"Computing Data with Reselect"}}},{"node":{"frontmatter":{"order":"1A","path":"/welcome","title":"Welcome and Introduction"}}},{"node":{"frontmatter":{"order":"5B","path":"/reselect-exercise","title":"Using Props with Reselect"}}},{"node":{"frontmatter":{"order":"7E","path":"/slice-actions","title":"Slice Actions"}}},{"node":{"frontmatter":{"order":"7F","path":"/create-action","title":"Creating Actions"}}},{"node":{"frontmatter":{"order":"7B","path":"/creating-a-slice","title":"Creating a Slice of State"}}},{"node":{"frontmatter":{"order":"7G","path":"/extra-reducers","title":"Extra Reducers"}}},{"node":{"frontmatter":{"order":"7A","path":"/redux-toolkit","title":"Introduction to Redux Toolkit"}}},{"node":{"frontmatter":{"order":"7C","path":"/creating-a-slice-exercise","title":"Human Slice (Exercise)"}}},{"node":{"frontmatter":{"order":"7D","path":"/creating-a-slice-solution","title":"Human Slice (Solution)"}}}]}},"pageContext":{}},"staticQueryHashes":["2959687377"]}